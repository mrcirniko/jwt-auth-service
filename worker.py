import asyncio
import aio_pika
import os
from aiogram import Bot, exceptions
from aiogram.types import Update

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
RABBITMQ_URL = os.getenv("RABBITMQ_URL", "amqp://guest:guest@rabbitmq:5672/")

bot = Bot(token=TELEGRAM_BOT_TOKEN)

async def get_chat_id(username: str):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç username –≤ chat_id, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è ‚Äî –∏—â–µ—Ç —á–µ—Ä–µ–∑ getUpdates()."""
    try:
        user = await bot.get_chat(username)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω chat_id {user.id} –¥–ª—è {username}")
        return user.id
    except exceptions.TelegramBadRequest:
        print(f"‚ùå {username} –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ get_chat(). –ü—Ä–æ–≤–µ—Ä—è—é getUpdates()...")

    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å chat_id —á–µ—Ä–µ–∑ getUpdates
    try:
        updates = await bot.get_updates()
        for update in updates:
            if update.message and update.message.from_user.username == username.lstrip("@"):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω chat_id {update.message.chat.id} —á–µ—Ä–µ–∑ getUpdates()")
                return update.message.chat.id
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ getUpdates(): {e}")

    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ chat_id –¥–ª—è {username}")
    return None


async def process_message(message: aio_pika.IncomingMessage):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ RabbitMQ."""
    async with message.process():
        body = message.body.decode()
        print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {body}")

        try:
            user_id, telegram_username = body.split(",")

            text = f"–ü—Ä–∏–≤–µ—Ç, {telegram_username}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! üéâ"
            chat_id = await get_chat_id(telegram_username)

            if chat_id:
                await bot.send_message(chat_id, text)
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {telegram_username} (chat_id: {chat_id})")
            else:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {telegram_username}")

        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞."""
    print("üì° Worker started. Connecting to RabbitMQ...")
    connection = await aio_pika.connect_robust(RABBITMQ_URL)
    channel = await connection.channel()

    queue = await channel.declare_queue("telegram_queue")
    await queue.consume(process_message)

    print("üì° Worker listening for messages...")

    while True:
        await asyncio.sleep(1)  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏


if __name__ == "__main__":
    asyncio.run(main())
